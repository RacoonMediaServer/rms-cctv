// Code generated by go-swagger; DO NOT EDIT.

package recorder_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new recorder service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for recorder service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetReplayURI(params *GetReplayURIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReplayURIOK, error)

	AddRecording(params *AddRecordingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddRecordingOK, error)

	DeleteRecording(params *DeleteRecordingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRecordingOK, error)

	RecordingControl(params *RecordingControlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordingControlOK, error)

	SetRecordingQuality(params *SetRecordingQualityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetRecordingQualityOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetReplayURI gets replay URI

Get Replay Recording URI
*/
func (a *Client) GetReplayURI(params *GetReplayURIParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReplayURIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReplayURIParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReplayURI",
		Method:             "GET",
		PathPattern:        "/recording/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReplayURIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReplayURIOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReplayURI: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddRecording adds recording

Add recording
*/
func (a *Client) AddRecording(params *AddRecordingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddRecordingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRecordingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addRecording",
		Method:             "POST",
		PathPattern:        "/recording",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddRecordingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddRecordingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addRecording: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRecording deletes recording

Delete recording
*/
func (a *Client) DeleteRecording(params *DeleteRecordingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRecordingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRecordingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRecording",
		Method:             "DELETE",
		PathPattern:        "/recording/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRecordingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRecordingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRecording: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RecordingControl recordings control

Pause/Resume recording
*/
func (a *Client) RecordingControl(params *RecordingControlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordingControlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecordingControlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "recordingControl",
		Method:             "PUT",
		PathPattern:        "/recording/{id}/control",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RecordingControlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecordingControlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for recordingControl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetRecordingQuality sets recording quality

Set recording quality
*/
func (a *Client) SetRecordingQuality(params *SetRecordingQualityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetRecordingQualityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetRecordingQualityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setRecordingQuality",
		Method:             "PUT",
		PathPattern:        "/recording/{id}/quality",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetRecordingQualityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetRecordingQualityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setRecordingQuality: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
