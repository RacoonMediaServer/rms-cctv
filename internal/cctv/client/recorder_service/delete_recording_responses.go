// Code generated by go-swagger; DO NOT EDIT.

package recorder_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteRecordingReader is a Reader for the DeleteRecording structure.
type DeleteRecordingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRecordingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRecordingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteRecordingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteRecordingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /recording/{id}] deleteRecording", response, response.Code())
	}
}

// NewDeleteRecordingOK creates a DeleteRecordingOK with default headers values
func NewDeleteRecordingOK() *DeleteRecordingOK {
	return &DeleteRecordingOK{}
}

/*
DeleteRecordingOK describes a response with status code 200, with default header values.

OK
*/
type DeleteRecordingOK struct {
}

// IsSuccess returns true when this delete recording o k response has a 2xx status code
func (o *DeleteRecordingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete recording o k response has a 3xx status code
func (o *DeleteRecordingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording o k response has a 4xx status code
func (o *DeleteRecordingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete recording o k response has a 5xx status code
func (o *DeleteRecordingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete recording o k response a status code equal to that given
func (o *DeleteRecordingOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete recording o k response
func (o *DeleteRecordingOK) Code() int {
	return 200
}

func (o *DeleteRecordingOK) Error() string {
	return fmt.Sprintf("[DELETE /recording/{id}][%d] deleteRecordingOK ", 200)
}

func (o *DeleteRecordingOK) String() string {
	return fmt.Sprintf("[DELETE /recording/{id}][%d] deleteRecordingOK ", 200)
}

func (o *DeleteRecordingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRecordingNotFound creates a DeleteRecordingNotFound with default headers values
func NewDeleteRecordingNotFound() *DeleteRecordingNotFound {
	return &DeleteRecordingNotFound{}
}

/*
DeleteRecordingNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteRecordingNotFound struct {
}

// IsSuccess returns true when this delete recording not found response has a 2xx status code
func (o *DeleteRecordingNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording not found response has a 3xx status code
func (o *DeleteRecordingNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording not found response has a 4xx status code
func (o *DeleteRecordingNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete recording not found response has a 5xx status code
func (o *DeleteRecordingNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete recording not found response a status code equal to that given
func (o *DeleteRecordingNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete recording not found response
func (o *DeleteRecordingNotFound) Code() int {
	return 404
}

func (o *DeleteRecordingNotFound) Error() string {
	return fmt.Sprintf("[DELETE /recording/{id}][%d] deleteRecordingNotFound ", 404)
}

func (o *DeleteRecordingNotFound) String() string {
	return fmt.Sprintf("[DELETE /recording/{id}][%d] deleteRecordingNotFound ", 404)
}

func (o *DeleteRecordingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRecordingInternalServerError creates a DeleteRecordingInternalServerError with default headers values
func NewDeleteRecordingInternalServerError() *DeleteRecordingInternalServerError {
	return &DeleteRecordingInternalServerError{}
}

/*
DeleteRecordingInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type DeleteRecordingInternalServerError struct {
}

// IsSuccess returns true when this delete recording internal server error response has a 2xx status code
func (o *DeleteRecordingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording internal server error response has a 3xx status code
func (o *DeleteRecordingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording internal server error response has a 4xx status code
func (o *DeleteRecordingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete recording internal server error response has a 5xx status code
func (o *DeleteRecordingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete recording internal server error response a status code equal to that given
func (o *DeleteRecordingInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete recording internal server error response
func (o *DeleteRecordingInternalServerError) Code() int {
	return 500
}

func (o *DeleteRecordingInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /recording/{id}][%d] deleteRecordingInternalServerError ", 500)
}

func (o *DeleteRecordingInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /recording/{id}][%d] deleteRecordingInternalServerError ", 500)
}

func (o *DeleteRecordingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
