// Code generated by go-swagger; DO NOT EDIT.

package recorder_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddRecordingReader is a Reader for the AddRecording structure.
type AddRecordingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddRecordingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddRecordingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAddRecordingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddRecordingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /recording] addRecording", response, response.Code())
	}
}

// NewAddRecordingOK creates a AddRecordingOK with default headers values
func NewAddRecordingOK() *AddRecordingOK {
	return &AddRecordingOK{}
}

/*
AddRecordingOK describes a response with status code 200, with default header values.

OK
*/
type AddRecordingOK struct {
	Payload *AddRecordingOKBody
}

// IsSuccess returns true when this add recording o k response has a 2xx status code
func (o *AddRecordingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add recording o k response has a 3xx status code
func (o *AddRecordingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add recording o k response has a 4xx status code
func (o *AddRecordingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add recording o k response has a 5xx status code
func (o *AddRecordingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add recording o k response a status code equal to that given
func (o *AddRecordingOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add recording o k response
func (o *AddRecordingOK) Code() int {
	return 200
}

func (o *AddRecordingOK) Error() string {
	return fmt.Sprintf("[POST /recording][%d] addRecordingOK  %+v", 200, o.Payload)
}

func (o *AddRecordingOK) String() string {
	return fmt.Sprintf("[POST /recording][%d] addRecordingOK  %+v", 200, o.Payload)
}

func (o *AddRecordingOK) GetPayload() *AddRecordingOKBody {
	return o.Payload
}

func (o *AddRecordingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddRecordingOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddRecordingNotFound creates a AddRecordingNotFound with default headers values
func NewAddRecordingNotFound() *AddRecordingNotFound {
	return &AddRecordingNotFound{}
}

/*
AddRecordingNotFound describes a response with status code 404, with default header values.

Stream Not Found
*/
type AddRecordingNotFound struct {
}

// IsSuccess returns true when this add recording not found response has a 2xx status code
func (o *AddRecordingNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add recording not found response has a 3xx status code
func (o *AddRecordingNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add recording not found response has a 4xx status code
func (o *AddRecordingNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add recording not found response has a 5xx status code
func (o *AddRecordingNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add recording not found response a status code equal to that given
func (o *AddRecordingNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add recording not found response
func (o *AddRecordingNotFound) Code() int {
	return 404
}

func (o *AddRecordingNotFound) Error() string {
	return fmt.Sprintf("[POST /recording][%d] addRecordingNotFound ", 404)
}

func (o *AddRecordingNotFound) String() string {
	return fmt.Sprintf("[POST /recording][%d] addRecordingNotFound ", 404)
}

func (o *AddRecordingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddRecordingInternalServerError creates a AddRecordingInternalServerError with default headers values
func NewAddRecordingInternalServerError() *AddRecordingInternalServerError {
	return &AddRecordingInternalServerError{}
}

/*
AddRecordingInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AddRecordingInternalServerError struct {
}

// IsSuccess returns true when this add recording internal server error response has a 2xx status code
func (o *AddRecordingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add recording internal server error response has a 3xx status code
func (o *AddRecordingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add recording internal server error response has a 4xx status code
func (o *AddRecordingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add recording internal server error response has a 5xx status code
func (o *AddRecordingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add recording internal server error response a status code equal to that given
func (o *AddRecordingInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add recording internal server error response
func (o *AddRecordingInternalServerError) Code() int {
	return 500
}

func (o *AddRecordingInternalServerError) Error() string {
	return fmt.Sprintf("[POST /recording][%d] addRecordingInternalServerError ", 500)
}

func (o *AddRecordingInternalServerError) String() string {
	return fmt.Sprintf("[POST /recording][%d] addRecordingInternalServerError ", 500)
}

func (o *AddRecordingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
AddRecordingBody add recording body
swagger:model AddRecordingBody
*/
type AddRecordingBody struct {

	// rotation days
	// Required: true
	// Minimum: 0
	RotationDays *int64 `json:"rotationDays"`

	// stream ID
	// Required: true
	StreamID *string `json:"streamID"`
}

// Validate validates this add recording body
func (o *AddRecordingBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRotationDays(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStreamID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddRecordingBody) validateRotationDays(formats strfmt.Registry) error {

	if err := validate.Required("recording"+"."+"rotationDays", "body", o.RotationDays); err != nil {
		return err
	}

	if err := validate.MinimumInt("recording"+"."+"rotationDays", "body", *o.RotationDays, 0, false); err != nil {
		return err
	}

	return nil
}

func (o *AddRecordingBody) validateStreamID(formats strfmt.Registry) error {

	if err := validate.Required("recording"+"."+"streamID", "body", o.StreamID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add recording body based on context it is used
func (o *AddRecordingBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddRecordingBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddRecordingBody) UnmarshalBinary(b []byte) error {
	var res AddRecordingBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddRecordingOKBody add recording o k body
swagger:model AddRecordingOKBody
*/
type AddRecordingOKBody struct {

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this add recording o k body
func (o *AddRecordingOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddRecordingOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("addRecordingOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add recording o k body based on context it is used
func (o *AddRecordingOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddRecordingOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddRecordingOKBody) UnmarshalBinary(b []byte) error {
	var res AddRecordingOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
