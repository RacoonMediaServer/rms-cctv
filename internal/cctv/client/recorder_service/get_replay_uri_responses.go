// Code generated by go-swagger; DO NOT EDIT.

package recorder_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetReplayURIReader is a Reader for the GetReplayURI structure.
type GetReplayURIReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReplayURIReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReplayURIOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReplayURIBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReplayURINotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetReplayURIInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /recording/{id}] GetReplayURI", response, response.Code())
	}
}

// NewGetReplayURIOK creates a GetReplayURIOK with default headers values
func NewGetReplayURIOK() *GetReplayURIOK {
	return &GetReplayURIOK{}
}

/*
GetReplayURIOK describes a response with status code 200, with default header values.

OK
*/
type GetReplayURIOK struct {
	Payload *GetReplayURIOKBody
}

// IsSuccess returns true when this get replay Uri o k response has a 2xx status code
func (o *GetReplayURIOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get replay Uri o k response has a 3xx status code
func (o *GetReplayURIOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get replay Uri o k response has a 4xx status code
func (o *GetReplayURIOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get replay Uri o k response has a 5xx status code
func (o *GetReplayURIOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get replay Uri o k response a status code equal to that given
func (o *GetReplayURIOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get replay Uri o k response
func (o *GetReplayURIOK) Code() int {
	return 200
}

func (o *GetReplayURIOK) Error() string {
	return fmt.Sprintf("[GET /recording/{id}][%d] getReplayUriOK  %+v", 200, o.Payload)
}

func (o *GetReplayURIOK) String() string {
	return fmt.Sprintf("[GET /recording/{id}][%d] getReplayUriOK  %+v", 200, o.Payload)
}

func (o *GetReplayURIOK) GetPayload() *GetReplayURIOKBody {
	return o.Payload
}

func (o *GetReplayURIOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetReplayURIOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReplayURIBadRequest creates a GetReplayURIBadRequest with default headers values
func NewGetReplayURIBadRequest() *GetReplayURIBadRequest {
	return &GetReplayURIBadRequest{}
}

/*
GetReplayURIBadRequest describes a response with status code 400, with default header values.

Not supported
*/
type GetReplayURIBadRequest struct {
}

// IsSuccess returns true when this get replay Uri bad request response has a 2xx status code
func (o *GetReplayURIBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get replay Uri bad request response has a 3xx status code
func (o *GetReplayURIBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get replay Uri bad request response has a 4xx status code
func (o *GetReplayURIBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get replay Uri bad request response has a 5xx status code
func (o *GetReplayURIBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get replay Uri bad request response a status code equal to that given
func (o *GetReplayURIBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get replay Uri bad request response
func (o *GetReplayURIBadRequest) Code() int {
	return 400
}

func (o *GetReplayURIBadRequest) Error() string {
	return fmt.Sprintf("[GET /recording/{id}][%d] getReplayUriBadRequest ", 400)
}

func (o *GetReplayURIBadRequest) String() string {
	return fmt.Sprintf("[GET /recording/{id}][%d] getReplayUriBadRequest ", 400)
}

func (o *GetReplayURIBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReplayURINotFound creates a GetReplayURINotFound with default headers values
func NewGetReplayURINotFound() *GetReplayURINotFound {
	return &GetReplayURINotFound{}
}

/*
GetReplayURINotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetReplayURINotFound struct {
}

// IsSuccess returns true when this get replay Uri not found response has a 2xx status code
func (o *GetReplayURINotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get replay Uri not found response has a 3xx status code
func (o *GetReplayURINotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get replay Uri not found response has a 4xx status code
func (o *GetReplayURINotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get replay Uri not found response has a 5xx status code
func (o *GetReplayURINotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get replay Uri not found response a status code equal to that given
func (o *GetReplayURINotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get replay Uri not found response
func (o *GetReplayURINotFound) Code() int {
	return 404
}

func (o *GetReplayURINotFound) Error() string {
	return fmt.Sprintf("[GET /recording/{id}][%d] getReplayUriNotFound ", 404)
}

func (o *GetReplayURINotFound) String() string {
	return fmt.Sprintf("[GET /recording/{id}][%d] getReplayUriNotFound ", 404)
}

func (o *GetReplayURINotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReplayURIInternalServerError creates a GetReplayURIInternalServerError with default headers values
func NewGetReplayURIInternalServerError() *GetReplayURIInternalServerError {
	return &GetReplayURIInternalServerError{}
}

/*
GetReplayURIInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetReplayURIInternalServerError struct {
}

// IsSuccess returns true when this get replay Uri internal server error response has a 2xx status code
func (o *GetReplayURIInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get replay Uri internal server error response has a 3xx status code
func (o *GetReplayURIInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get replay Uri internal server error response has a 4xx status code
func (o *GetReplayURIInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get replay Uri internal server error response has a 5xx status code
func (o *GetReplayURIInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get replay Uri internal server error response a status code equal to that given
func (o *GetReplayURIInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get replay Uri internal server error response
func (o *GetReplayURIInternalServerError) Code() int {
	return 500
}

func (o *GetReplayURIInternalServerError) Error() string {
	return fmt.Sprintf("[GET /recording/{id}][%d] getReplayUriInternalServerError ", 500)
}

func (o *GetReplayURIInternalServerError) String() string {
	return fmt.Sprintf("[GET /recording/{id}][%d] getReplayUriInternalServerError ", 500)
}

func (o *GetReplayURIInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetReplayURIOKBody get replay URI o k body
swagger:model GetReplayURIOKBody
*/
type GetReplayURIOKBody struct {

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this get replay URI o k body
func (o *GetReplayURIOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get replay URI o k body based on context it is used
func (o *GetReplayURIOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetReplayURIOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetReplayURIOKBody) UnmarshalBinary(b []byte) error {
	var res GetReplayURIOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
