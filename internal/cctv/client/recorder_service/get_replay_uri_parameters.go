// Code generated by go-swagger; DO NOT EDIT.

package recorder_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetReplayURIParams creates a new GetReplayURIParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetReplayURIParams() *GetReplayURIParams {
	return &GetReplayURIParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetReplayURIParamsWithTimeout creates a new GetReplayURIParams object
// with the ability to set a timeout on a request.
func NewGetReplayURIParamsWithTimeout(timeout time.Duration) *GetReplayURIParams {
	return &GetReplayURIParams{
		timeout: timeout,
	}
}

// NewGetReplayURIParamsWithContext creates a new GetReplayURIParams object
// with the ability to set a context for a request.
func NewGetReplayURIParamsWithContext(ctx context.Context) *GetReplayURIParams {
	return &GetReplayURIParams{
		Context: ctx,
	}
}

// NewGetReplayURIParamsWithHTTPClient creates a new GetReplayURIParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetReplayURIParamsWithHTTPClient(client *http.Client) *GetReplayURIParams {
	return &GetReplayURIParams{
		HTTPClient: client,
	}
}

/*
GetReplayURIParams contains all the parameters to send to the API endpoint

	for the get replay URI operation.

	Typically these are written to a http.Request.
*/
type GetReplayURIParams struct {

	/* ID.

	   Recording ID
	*/
	ID string

	/* Timestamp.

	   UNIX UTC Timestamp for replay recording
	*/
	Timestamp *int64

	/* Transport.

	   Video transport

	   Default: "RTSP"
	*/
	Transport *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get replay URI params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetReplayURIParams) WithDefaults() *GetReplayURIParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get replay URI params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetReplayURIParams) SetDefaults() {
	var (
		timestampDefault = int64(0)

		transportDefault = string("RTSP")
	)

	val := GetReplayURIParams{
		Timestamp: &timestampDefault,
		Transport: &transportDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get replay URI params
func (o *GetReplayURIParams) WithTimeout(timeout time.Duration) *GetReplayURIParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get replay URI params
func (o *GetReplayURIParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get replay URI params
func (o *GetReplayURIParams) WithContext(ctx context.Context) *GetReplayURIParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get replay URI params
func (o *GetReplayURIParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get replay URI params
func (o *GetReplayURIParams) WithHTTPClient(client *http.Client) *GetReplayURIParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get replay URI params
func (o *GetReplayURIParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get replay URI params
func (o *GetReplayURIParams) WithID(id string) *GetReplayURIParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get replay URI params
func (o *GetReplayURIParams) SetID(id string) {
	o.ID = id
}

// WithTimestamp adds the timestamp to the get replay URI params
func (o *GetReplayURIParams) WithTimestamp(timestamp *int64) *GetReplayURIParams {
	o.SetTimestamp(timestamp)
	return o
}

// SetTimestamp adds the timestamp to the get replay URI params
func (o *GetReplayURIParams) SetTimestamp(timestamp *int64) {
	o.Timestamp = timestamp
}

// WithTransport adds the transport to the get replay URI params
func (o *GetReplayURIParams) WithTransport(transport *string) *GetReplayURIParams {
	o.SetTransport(transport)
	return o
}

// SetTransport adds the transport to the get replay URI params
func (o *GetReplayURIParams) SetTransport(transport *string) {
	o.Transport = transport
}

// WriteToRequest writes these params to a swagger request
func (o *GetReplayURIParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Timestamp != nil {

		// query param timestamp
		var qrTimestamp int64

		if o.Timestamp != nil {
			qrTimestamp = *o.Timestamp
		}
		qTimestamp := swag.FormatInt64(qrTimestamp)
		if qTimestamp != "" {

			if err := r.SetQueryParam("timestamp", qTimestamp); err != nil {
				return err
			}
		}
	}

	if o.Transport != nil {

		// query param transport
		var qrTransport string

		if o.Transport != nil {
			qrTransport = *o.Transport
		}
		qTransport := qrTransport
		if qTransport != "" {

			if err := r.SetQueryParam("transport", qTransport); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
