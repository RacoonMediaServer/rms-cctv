// Code generated by go-swagger; DO NOT EDIT.

package recorder_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SetRecordingQualityReader is a Reader for the SetRecordingQuality structure.
type SetRecordingQualityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetRecordingQualityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetRecordingQualityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewSetRecordingQualityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSetRecordingQualityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /recording/{id}/quality] setRecordingQuality", response, response.Code())
	}
}

// NewSetRecordingQualityOK creates a SetRecordingQualityOK with default headers values
func NewSetRecordingQualityOK() *SetRecordingQualityOK {
	return &SetRecordingQualityOK{}
}

/*
SetRecordingQualityOK describes a response with status code 200, with default header values.

OK
*/
type SetRecordingQualityOK struct {
	Payload *SetRecordingQualityOKBody
}

// IsSuccess returns true when this set recording quality o k response has a 2xx status code
func (o *SetRecordingQualityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set recording quality o k response has a 3xx status code
func (o *SetRecordingQualityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set recording quality o k response has a 4xx status code
func (o *SetRecordingQualityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this set recording quality o k response has a 5xx status code
func (o *SetRecordingQualityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this set recording quality o k response a status code equal to that given
func (o *SetRecordingQualityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the set recording quality o k response
func (o *SetRecordingQualityOK) Code() int {
	return 200
}

func (o *SetRecordingQualityOK) Error() string {
	return fmt.Sprintf("[PUT /recording/{id}/quality][%d] setRecordingQualityOK  %+v", 200, o.Payload)
}

func (o *SetRecordingQualityOK) String() string {
	return fmt.Sprintf("[PUT /recording/{id}/quality][%d] setRecordingQualityOK  %+v", 200, o.Payload)
}

func (o *SetRecordingQualityOK) GetPayload() *SetRecordingQualityOKBody {
	return o.Payload
}

func (o *SetRecordingQualityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SetRecordingQualityOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetRecordingQualityNotFound creates a SetRecordingQualityNotFound with default headers values
func NewSetRecordingQualityNotFound() *SetRecordingQualityNotFound {
	return &SetRecordingQualityNotFound{}
}

/*
SetRecordingQualityNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SetRecordingQualityNotFound struct {
}

// IsSuccess returns true when this set recording quality not found response has a 2xx status code
func (o *SetRecordingQualityNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set recording quality not found response has a 3xx status code
func (o *SetRecordingQualityNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set recording quality not found response has a 4xx status code
func (o *SetRecordingQualityNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set recording quality not found response has a 5xx status code
func (o *SetRecordingQualityNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set recording quality not found response a status code equal to that given
func (o *SetRecordingQualityNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the set recording quality not found response
func (o *SetRecordingQualityNotFound) Code() int {
	return 404
}

func (o *SetRecordingQualityNotFound) Error() string {
	return fmt.Sprintf("[PUT /recording/{id}/quality][%d] setRecordingQualityNotFound ", 404)
}

func (o *SetRecordingQualityNotFound) String() string {
	return fmt.Sprintf("[PUT /recording/{id}/quality][%d] setRecordingQualityNotFound ", 404)
}

func (o *SetRecordingQualityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetRecordingQualityInternalServerError creates a SetRecordingQualityInternalServerError with default headers values
func NewSetRecordingQualityInternalServerError() *SetRecordingQualityInternalServerError {
	return &SetRecordingQualityInternalServerError{}
}

/*
SetRecordingQualityInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SetRecordingQualityInternalServerError struct {
}

// IsSuccess returns true when this set recording quality internal server error response has a 2xx status code
func (o *SetRecordingQualityInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set recording quality internal server error response has a 3xx status code
func (o *SetRecordingQualityInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set recording quality internal server error response has a 4xx status code
func (o *SetRecordingQualityInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this set recording quality internal server error response has a 5xx status code
func (o *SetRecordingQualityInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this set recording quality internal server error response a status code equal to that given
func (o *SetRecordingQualityInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the set recording quality internal server error response
func (o *SetRecordingQualityInternalServerError) Code() int {
	return 500
}

func (o *SetRecordingQualityInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /recording/{id}/quality][%d] setRecordingQualityInternalServerError ", 500)
}

func (o *SetRecordingQualityInternalServerError) String() string {
	return fmt.Sprintf("[PUT /recording/{id}/quality][%d] setRecordingQualityInternalServerError ", 500)
}

func (o *SetRecordingQualityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SetRecordingQualityOKBody set recording quality o k body
swagger:model SetRecordingQualityOKBody
*/
type SetRecordingQualityOKBody struct {

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this set recording quality o k body
func (o *SetRecordingQualityOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this set recording quality o k body based on context it is used
func (o *SetRecordingQualityOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SetRecordingQualityOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetRecordingQualityOKBody) UnmarshalBinary(b []byte) error {
	var res SetRecordingQualityOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
