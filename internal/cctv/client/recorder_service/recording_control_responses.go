// Code generated by go-swagger; DO NOT EDIT.

package recorder_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecordingControlReader is a Reader for the RecordingControl structure.
type RecordingControlReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RecordingControlReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRecordingControlOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRecordingControlNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRecordingControlInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /recording/{id}/control] recordingControl", response, response.Code())
	}
}

// NewRecordingControlOK creates a RecordingControlOK with default headers values
func NewRecordingControlOK() *RecordingControlOK {
	return &RecordingControlOK{}
}

/*
RecordingControlOK describes a response with status code 200, with default header values.

OK
*/
type RecordingControlOK struct {
	Payload *RecordingControlOKBody
}

// IsSuccess returns true when this recording control o k response has a 2xx status code
func (o *RecordingControlOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this recording control o k response has a 3xx status code
func (o *RecordingControlOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this recording control o k response has a 4xx status code
func (o *RecordingControlOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this recording control o k response has a 5xx status code
func (o *RecordingControlOK) IsServerError() bool {
	return false
}

// IsCode returns true when this recording control o k response a status code equal to that given
func (o *RecordingControlOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the recording control o k response
func (o *RecordingControlOK) Code() int {
	return 200
}

func (o *RecordingControlOK) Error() string {
	return fmt.Sprintf("[PUT /recording/{id}/control][%d] recordingControlOK  %+v", 200, o.Payload)
}

func (o *RecordingControlOK) String() string {
	return fmt.Sprintf("[PUT /recording/{id}/control][%d] recordingControlOK  %+v", 200, o.Payload)
}

func (o *RecordingControlOK) GetPayload() *RecordingControlOKBody {
	return o.Payload
}

func (o *RecordingControlOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RecordingControlOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRecordingControlNotFound creates a RecordingControlNotFound with default headers values
func NewRecordingControlNotFound() *RecordingControlNotFound {
	return &RecordingControlNotFound{}
}

/*
RecordingControlNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RecordingControlNotFound struct {
}

// IsSuccess returns true when this recording control not found response has a 2xx status code
func (o *RecordingControlNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this recording control not found response has a 3xx status code
func (o *RecordingControlNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this recording control not found response has a 4xx status code
func (o *RecordingControlNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this recording control not found response has a 5xx status code
func (o *RecordingControlNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this recording control not found response a status code equal to that given
func (o *RecordingControlNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the recording control not found response
func (o *RecordingControlNotFound) Code() int {
	return 404
}

func (o *RecordingControlNotFound) Error() string {
	return fmt.Sprintf("[PUT /recording/{id}/control][%d] recordingControlNotFound ", 404)
}

func (o *RecordingControlNotFound) String() string {
	return fmt.Sprintf("[PUT /recording/{id}/control][%d] recordingControlNotFound ", 404)
}

func (o *RecordingControlNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRecordingControlInternalServerError creates a RecordingControlInternalServerError with default headers values
func NewRecordingControlInternalServerError() *RecordingControlInternalServerError {
	return &RecordingControlInternalServerError{}
}

/*
RecordingControlInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type RecordingControlInternalServerError struct {
}

// IsSuccess returns true when this recording control internal server error response has a 2xx status code
func (o *RecordingControlInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this recording control internal server error response has a 3xx status code
func (o *RecordingControlInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this recording control internal server error response has a 4xx status code
func (o *RecordingControlInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this recording control internal server error response has a 5xx status code
func (o *RecordingControlInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this recording control internal server error response a status code equal to that given
func (o *RecordingControlInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the recording control internal server error response
func (o *RecordingControlInternalServerError) Code() int {
	return 500
}

func (o *RecordingControlInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /recording/{id}/control][%d] recordingControlInternalServerError ", 500)
}

func (o *RecordingControlInternalServerError) String() string {
	return fmt.Sprintf("[PUT /recording/{id}/control][%d] recordingControlInternalServerError ", 500)
}

func (o *RecordingControlInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
RecordingControlOKBody recording control o k body
swagger:model RecordingControlOKBody
*/
type RecordingControlOKBody struct {

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this recording control o k body
func (o *RecordingControlOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this recording control o k body based on context it is used
func (o *RecordingControlOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RecordingControlOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RecordingControlOKBody) UnmarshalBinary(b []byte) error {
	var res RecordingControlOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
