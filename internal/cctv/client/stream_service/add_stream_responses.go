// Code generated by go-swagger; DO NOT EDIT.

package stream_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddStreamReader is a Reader for the AddStream structure.
type AddStreamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddStreamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddStreamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddStreamBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddStreamInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /stream] addStream", response, response.Code())
	}
}

// NewAddStreamOK creates a AddStreamOK with default headers values
func NewAddStreamOK() *AddStreamOK {
	return &AddStreamOK{}
}

/*
AddStreamOK describes a response with status code 200, with default header values.

OK
*/
type AddStreamOK struct {
	Payload *AddStreamOKBody
}

// IsSuccess returns true when this add stream o k response has a 2xx status code
func (o *AddStreamOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add stream o k response has a 3xx status code
func (o *AddStreamOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add stream o k response has a 4xx status code
func (o *AddStreamOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add stream o k response has a 5xx status code
func (o *AddStreamOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add stream o k response a status code equal to that given
func (o *AddStreamOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add stream o k response
func (o *AddStreamOK) Code() int {
	return 200
}

func (o *AddStreamOK) Error() string {
	return fmt.Sprintf("[POST /stream][%d] addStreamOK  %+v", 200, o.Payload)
}

func (o *AddStreamOK) String() string {
	return fmt.Sprintf("[POST /stream][%d] addStreamOK  %+v", 200, o.Payload)
}

func (o *AddStreamOK) GetPayload() *AddStreamOKBody {
	return o.Payload
}

func (o *AddStreamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddStreamOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddStreamBadRequest creates a AddStreamBadRequest with default headers values
func NewAddStreamBadRequest() *AddStreamBadRequest {
	return &AddStreamBadRequest{}
}

/*
AddStreamBadRequest describes a response with status code 400, with default header values.

Invalid URL
*/
type AddStreamBadRequest struct {
}

// IsSuccess returns true when this add stream bad request response has a 2xx status code
func (o *AddStreamBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add stream bad request response has a 3xx status code
func (o *AddStreamBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add stream bad request response has a 4xx status code
func (o *AddStreamBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add stream bad request response has a 5xx status code
func (o *AddStreamBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add stream bad request response a status code equal to that given
func (o *AddStreamBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add stream bad request response
func (o *AddStreamBadRequest) Code() int {
	return 400
}

func (o *AddStreamBadRequest) Error() string {
	return fmt.Sprintf("[POST /stream][%d] addStreamBadRequest ", 400)
}

func (o *AddStreamBadRequest) String() string {
	return fmt.Sprintf("[POST /stream][%d] addStreamBadRequest ", 400)
}

func (o *AddStreamBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddStreamInternalServerError creates a AddStreamInternalServerError with default headers values
func NewAddStreamInternalServerError() *AddStreamInternalServerError {
	return &AddStreamInternalServerError{}
}

/*
AddStreamInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AddStreamInternalServerError struct {
}

// IsSuccess returns true when this add stream internal server error response has a 2xx status code
func (o *AddStreamInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add stream internal server error response has a 3xx status code
func (o *AddStreamInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add stream internal server error response has a 4xx status code
func (o *AddStreamInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add stream internal server error response has a 5xx status code
func (o *AddStreamInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add stream internal server error response a status code equal to that given
func (o *AddStreamInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add stream internal server error response
func (o *AddStreamInternalServerError) Code() int {
	return 500
}

func (o *AddStreamInternalServerError) Error() string {
	return fmt.Sprintf("[POST /stream][%d] addStreamInternalServerError ", 500)
}

func (o *AddStreamInternalServerError) String() string {
	return fmt.Sprintf("[POST /stream][%d] addStreamInternalServerError ", 500)
}

func (o *AddStreamInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
AddStreamBody add stream body
swagger:model AddStreamBody
*/
type AddStreamBody struct {

	// url
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this add stream body
func (o *AddStreamBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddStreamBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("stream"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add stream body based on context it is used
func (o *AddStreamBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddStreamBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddStreamBody) UnmarshalBinary(b []byte) error {
	var res AddStreamBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddStreamOKBody add stream o k body
swagger:model AddStreamOKBody
*/
type AddStreamOKBody struct {

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this add stream o k body
func (o *AddStreamOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddStreamOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("addStreamOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add stream o k body based on context it is used
func (o *AddStreamOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddStreamOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddStreamOKBody) UnmarshalBinary(b []byte) error {
	var res AddStreamOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
