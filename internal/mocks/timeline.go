// Code generated by MockGen. DO NOT EDIT.
// Source: internal/timeline/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	timeline "github.com/RacoonMediaServer/rms-cctv/internal/timeline"
	gomock "github.com/golang/mock/gomock"
)

// MockDefer is a mock of Defer interface.
type MockDefer struct {
	ctrl     *gomock.Controller
	recorder *MockDeferMockRecorder
}

// MockDeferMockRecorder is the mock recorder for MockDefer.
type MockDeferMockRecorder struct {
	mock *MockDefer
}

// NewMockDefer creates a new mock instance.
func NewMockDefer(ctrl *gomock.Controller) *MockDefer {
	mock := &MockDefer{ctrl: ctrl}
	mock.recorder = &MockDeferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefer) EXPECT() *MockDeferMockRecorder {
	return m.recorder
}

// Defer mocks base method.
func (m *MockDefer) Defer(ctx context.Context, handler timeline.Handler, after time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Defer", ctx, handler, after)
}

// Defer indicates an expected call of Defer.
func (mr *MockDeferMockRecorder) Defer(ctx, handler, after interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Defer", reflect.TypeOf((*MockDefer)(nil).Defer), ctx, handler, after)
}

// MockTimeline is a mock of Timeline interface.
type MockTimeline struct {
	ctrl     *gomock.Controller
	recorder *MockTimelineMockRecorder
}

// MockTimelineMockRecorder is the mock recorder for MockTimeline.
type MockTimelineMockRecorder struct {
	mock *MockTimeline
}

// NewMockTimeline creates a new mock instance.
func NewMockTimeline(ctrl *gomock.Controller) *MockTimeline {
	mock := &MockTimeline{ctrl: ctrl}
	mock.recorder = &MockTimelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeline) EXPECT() *MockTimelineMockRecorder {
	return m.recorder
}

// Defer mocks base method.
func (m *MockTimeline) Defer(ctx context.Context, handler timeline.Handler, after time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Defer", ctx, handler, after)
}

// Defer indicates an expected call of Defer.
func (mr *MockTimelineMockRecorder) Defer(ctx, handler, after interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Defer", reflect.TypeOf((*MockTimeline)(nil).Defer), ctx, handler, after)
}

// Stop mocks base method.
func (m *MockTimeline) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTimelineMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTimeline)(nil).Stop))
}
