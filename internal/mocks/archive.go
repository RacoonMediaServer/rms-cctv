// Code generated by MockGen. DO NOT EDIT.
// Source: internal/accessor/archive.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArchive is a mock of Archive interface.
type MockArchive struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveMockRecorder
}

// MockArchiveMockRecorder is the mock recorder for MockArchive.
type MockArchiveMockRecorder struct {
	mock *MockArchive
}

// NewMockArchive creates a new mock instance.
func NewMockArchive(ctrl *gomock.Controller) *MockArchive {
	mock := &MockArchive{ctrl: ctrl}
	mock.recorder = &MockArchiveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchive) EXPECT() *MockArchiveMockRecorder {
	return m.recorder
}

// SetQuality mocks base method.
func (m *MockArchive) SetQuality(quality uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQuality", quality)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQuality indicates an expected call of SetQuality.
func (mr *MockArchiveMockRecorder) SetQuality(quality interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQuality", reflect.TypeOf((*MockArchive)(nil).SetQuality), quality)
}

// StartRecording mocks base method.
func (m *MockArchive) StartRecording() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRecording")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartRecording indicates an expected call of StartRecording.
func (mr *MockArchiveMockRecorder) StartRecording() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecording", reflect.TypeOf((*MockArchive)(nil).StartRecording))
}

// StopRecording mocks base method.
func (m *MockArchive) StopRecording() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopRecording")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopRecording indicates an expected call of StopRecording.
func (mr *MockArchiveMockRecorder) StopRecording() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRecording", reflect.TypeOf((*MockArchive)(nil).StopRecording))
}
